#!/usr/bin/python3

"""
    SSH authorized_keys command="..." wrapper

    Testing:
        virtualenv opt && ./opt/bin/pip install -e

        sudo SSH_ORIG_COMMAND='zfs send ...' ./opt/bin/qmsk.zfs-ssh-command

        ./opt/bin/qmsk.zfs-ssh-command -- zfs send ...

"""

from qmsk.backup import __version__

import argparse
import contextlib
import fnmatch
import logging
import os.path
import qmsk.args
import qmsk.backup.zfs
import shlex

log = logging.getLogger('qmsk.backup-ssh-command')

class Error (Exception):
    pass

@contextlib.contextmanager
def wrap_context(value):
    """
        Dummy context manager that does nothing much.
    """

    yield value

class Wrapper:
    """
        Command wrapper
    """

    def __init__(self, noop=None, sudo=None, restrict_raw=None, restrict_glob=None, restrict_bookmarks=None, allow_receive=None, allow_force_receive=None):
        self.noop = noop
        self.sudo = sudo
        self.restrict_raw = restrict_raw
        self.restrict_glob = restrict_glob
        self.restrict_bookmarks = restrict_bookmarks
        self.allow_receive = allow_receive
        self.allow_force_receive = allow_force_receive

    def zfs_receive(self, args):
        target = args.zfs

        if '@' in target:
            zfs_name, snapshot_name = target.split('@', 1)
        else:
            zfs_name = target
            snapshot_name = None

        if not self.allow_receive:
            raise Error("Restricted recv operation")

        if args.receive_force and not self.allow_force_receive:
            raise Error("Restricted recv -F operation")

        if self.restrict_glob and not any(fnmatch.fnmatch(zfs_name, pattern) for pattern in self.restrict_glob):
            raise Error("Restricted recv source: {name}".format(name=zfs_name))

        zfs = qmsk.backup.zfs.Filesystem(zfs_name,
            noop    = self.noop,
            invoker = qmsk.invoke.Invoker(sudo=self.sudo),
        )

        log.info("zfs recv %s with snapshot=%s, force=%s", zfs, snapshot_name, args.receive_force)

        zfs.receive(
            snapshot_name   = snapshot_name,
            force           = args.receive_force,
            noop            = args.receive_noop,
            verbose         = args.receive_verbose,
            stdin           = True, # passthrough
        )

        return 0

    def zfs_send(self, args):
        target = args.zfs

        if '@' in target:
            zfs_name, snapshot_name = target.split('@', 1)
        else:
            zfs_name = target
            snapshot_name = None

        if self.restrict_raw and not args.raw:
            raise Error("Only --raw sends are allowed")

        if self.restrict_glob and not any(fnmatch.fnmatch(zfs_name, pattern) for pattern in self.restrict_glob):
            raise Error("Restricted send source: {name}".format(name=zfs_name))

        if args.bookmark and self.restrict_bookmarks and not any(fnmatch.fnmatch(args.bookmark, pattern) for pattern in self.restrict_bookmarks):
            raise Error("Restricted --bookmark={bookmark}".format(bookmark=args.bookmark))

        if args.purge_bookmark and self.restrict_bookmarks and not any(fnmatch.fnmatch(args.purge_bookmark, pattern) for pattern in self.restrict_bookmarks):
            raise Error("Restricted --purge-bookmark={bookmark}".format(bookmark=args.purge_bookmark))

        zfs = qmsk.backup.zfs.open(zfs_name,
            noop    = self.noop,
            invoker = qmsk.invoke.Invoker(sudo=self.sudo),
        )

        incremental_snapshot = incremental_bookmark = None
        send_incremental = full_incremental = None

        if args.incremental_snapshot and args.incremental_snapshot.startswith('#'):
            send_incremental = incremental_bookmark = str(zfs) + args.incremental_snapshot
        elif args.incremental_snapshot:
            send_incremental = incremental_snapshot = zfs.snapshots[args.incremental_snapshot]
        elif args.incremental_full:
            full_incremental = incremental_snapshot = zfs.snapshots[args.incremental_full]

        if snapshot_name is None: # zfs send tank/foo
            # send from temporary snapshot
            snapshot_context = qmsk.backup.zfs.snapshot(zfs, properties={'qmsk-backup:send': incremental_snapshot})

        elif snapshot_name == '*': # zfs send tank/foo@*
            # send from most recent snapshot
            snapshot_context = wrap_context(zfs.last_snapshot())

        else: # zfs send tank/foo@xxx
            # send from given snapshot
            snapshot_context = wrap_context(zfs.snapshots[snapshot_name])

        log.info("zfs send %s from incremental=%s to snapshot=@%s with bookmark=%s", zfs, send_incremental, snapshot_context, args.bookmark)

        with snapshot_context as snapshot:
            snapshot.send(
                incremental         = send_incremental,
                full_incremental    = full_incremental,
                properties          = args.properties,
                replication_stream  = args.replication,
                raw                 = args.raw,
                compressed          = args.compressed,
                large_block         = args.large_block,
                dedup               = args.dedup,
            )

            if args.bookmark:
                # mookmark the send snapshot for next send
                snapshot.bookmark(args.bookmark)

        if args.purge_bookmark:
            zfs.destroy_bookmark(args.purge_bookmark)

        if args.purge_bookmarks:
            if args.keep_bookmark:
                keep = set(args.keep_bookmark)
            else:
                keep = set()

            for bookmark in zfs.list_bookmarks():
                if not fnmatch.fnmatch(bookmark.name, args.purge_bookmarks):
                    log.debug("skip bookmark from purge: {bookmark}".format(bookmark=bookmark))
                    continue

                if self.restrict_bookmarks and not any(fnmatch.fnmatch(bookmark.name, pattern) for pattern in self.restrict_bookmarks):
                    raise Error("Restricted bookmark: {bookmark}".format(bookmark=bookmark))

                if bookmark.name in keep:
                    log.debug("keep bookmark from purge: {bookmark}".format(bookmark=bookmark))
                    continue

                log.info("zfs send %s purge bookmark=%s", zfs_name, bookmark.name)

                bookmark.destroy()

        return 0

    def zfs(self, args):
        parser = argparse.ArgumentParser(prog='zfs')
        subparsers = parser.add_subparsers(dest='command')

        parser_send = subparsers.add_parser('send')
        parser_send.add_argument('-i', dest='incremental_snapshot', metavar='SNAPSHOT', help="Incremental send from snapshot")
        parser_send.add_argument('-I', dest='incremental_full', metavar='SNAPSHOT', help="Full incremental send of all snapshots from snapshot")
        parser_send.add_argument('-p', dest='properties', action='store_true', help="Send dataset properties")
        parser_send.add_argument('-R', dest='replication', action='store_true', help="Send replication stream")
        parser_send.add_argument('-w', dest='raw', action='store_true', help="For encrypted datasets, send data exactly as it exists on disk")
        parser_send.add_argument('-c', dest='compressed', action='store_true', help="For compressed datasets, send compresssed blocks from disk")
        parser_send.add_argument('-L', dest='large_block', action='store_true', help="Generate a stream which may contain blocks larger than 128KB")
        parser_send.add_argument('-D', dest='dedup', action='store_true', help="Generate a deduplicated stream")
        parser_send.add_argument('zfs', metavar='ZFS', help="Source ZFS filesystem, with optional @snapshot")
        parser_send.add_argument('--bookmark', metavar='BOOKMARK', help="Bookmark snapshot after send")
        parser_send.add_argument('--purge-bookmark', metavar='BOOKMARK', help="Destroy bookmark after snapshot send")
        parser_send.add_argument('--purge-bookmarks', metavar='BOOKMARK-GLOB', help="Destroy matching bookmarks after snapshot send")
        parser_send.add_argument('--keep-bookmark', action='append', metavar='BOOKMARK', help="Bookmarks to keep, when using --purge-bookmarks")

        parser_recv = subparsers.add_parser('receive', aliases=['recv'])
        parser_recv.add_argument('-F', dest='receive_force', action='store_true', help="Force a rollback of the file system to the most recent snapshot before performing the receive operation.")
        parser_recv.add_argument('-n', dest='receive_noop', action='store_true', help="Do not actually receive the stream.")
        parser_recv.add_argument('-v', dest='receive_verbose', action='store_true', help="Print verbose information about the stream and the time required to perform the receive operation.")
        parser_recv.add_argument('zfs', metavar='ZFS', help="Destination ZFS filesystem, with optional @snapshot")

        args = parser.parse_args(args)

        if args.command == 'send':
            return self.zfs_send(args)
        elif args.command == 'receive' or args.command == 'recv':
            return self.zfs_receive(args)
        else:
            log.error("Unsupported ZFS command: %s", args.command)
            return 1

    def __call__(self, cmd, args):
        name = os.path.basename(cmd)

        log.debug("%s %s", name, args)

        if name == 'zfs':
            return self.zfs(args)
        else:
            log.error("Unsupported command: %s", cmd)
            return 1

        return 0

def main (args):
    """
        Run, with full argv
    """

    parser = qmsk.args.parser(package='backup', module='ssh-command',
            description = __doc__,
            version     = __version__,
    )

    parser.add_argument('command', nargs='*', metavar='CMD',
            help="Wrapped command")

    parser.add_argument('-n', '--noop', action='store_true', default=False,
            help="Parse command, but do not execute")

    parser.add_argument('--sudo',             action='store_true',
            help="Execute privileges commands with sudo")

    parser.add_argument('--restrict-glob', action='append',
            help="Restrict to datasets matching glob patterns")

    parser.add_argument('--restrict-raw', action='store_true',
            help="Only allow raw snapshot sends")

    parser.add_argument('--restrict-bookmarks', action='append',
            help="Only allow matching bookmarks")

    parser.add_argument('--allow-receive', '--allow-recv', action='store_true',
            help="Also allow zfs recv for restore operations. The --restrict-glob still applies.")

    parser.add_argument('--allow-force-receive', '--allow-force-recv', action='store_true',
            help="Also allow zfs recv -F for restore operations. Does NOT imply --allow-receive.")

    parser.set_defaults(
        restrict_bookmarks = [],
        restrict_glob = [],
    )

    # parse
    args = qmsk.args.parse(parser, args)

    # from args (as given by `rsync -e qmsk.backup-rsync`) -> 'qmsk.backup-rsync <host> (<command> ...)'
    if args.command:
        command_parts = args.command

    elif 'SSH_ORIGINAL_COMMAND' in os.environ:
        # from ssh authorized_keys command="..."
        command_parts = shlex.split(os.environ.get('SSH_ORIGINAL_COMMAND'))

    else:
        parser.error("No wrapped command given")

    # run
    try:
        wrapper = Wrapper(
            noop    = args.noop,
            sudo    = args.sudo,

            restrict_raw        = args.restrict_raw,
            restrict_glob       = args.restrict_glob,
            restrict_bookmarks  = args.restrict_bookmarks,

            allow_receive       = args.allow_receive,
            allow_force_receive = args.allow_force_receive,
        )

        return wrapper(command_parts[0], command_parts[1:])

    except Error as error:
        log.error("%s", error)
        return 2

    except Exception as error:
        log.exception("Internal error: %s", error)
        return 3

if __name__ == '__main__':
    qmsk.args.main(main)
