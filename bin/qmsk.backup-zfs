#!/usr/bin/python3

"""
    Manage ZFS snapshots, with optional rsync or ZFS source.

    sudo ./opt/bin/qmsk.backup-zfs -v tank/backup/test \
            --rsync-source=lvm:test/test \
            --snapshot '5@%Y%m%d-%H%M%S' \
            --snapshot '5@%Y%m%d' \
            --snapshot '5@%Y%m' \
            --snapshot '5@%Y' \
            --purge

"""

import datetime
import logging
import qmsk.args
import qmsk.backup.zfs
import qmsk.invoke
import socket

from qmsk.backup import __version__
from qmsk.backup.target import Error, Interval, BaseTarget

log = logging.getLogger('qmsk.backup-zfs')

class ZFSTarget (BaseTarget):
    """
        ZFS rsync snapshot management
    """

    @classmethod
    def config (cls, name,
            noop            = None,
            zfs_source      = None,
            zfs_raw         = None,
            zfs_compressed  = None,
            zfs_bookmark    = None,
            invoker_options = {},
            ssh_options     = {},
            **opts
    ):
        if zfs_source:
            zfs_source = qmsk.backup.zfs.Source.config(zfs_source,
                    invoker_options = invoker_options,
                    ssh_options     = ssh_options,
            )

        return super(ZFSTarget, cls).config(
                zfs             = qmsk.backup.zfs.Filesystem(name,
                    noop    = noop,
                    invoker = qmsk.invoke.Invoker(**invoker_options),
                ),
                zfs_source      = zfs_source,
                zfs_send_options = dict(
                    raw         = zfs_raw,
                    compressed  = zfs_compressed,
                ),
                zfs_bookmark    = zfs_bookmark,
                noop            = noop,
                **opts
        )

    def __init__ (self, zfs, zfs_source=None, zfs_send_options={}, zfs_bookmark=None, **opts):
        super(ZFSTarget, self).__init__(**opts)

        self.zfs = zfs
        self.zfs_source = zfs_source
        self.zfs_send_options = zfs_send_options
        self.zfs_bookmark = zfs_bookmark

    def __str__ (self):
        return str(self.zfs)

    def create (self, source):
        """
            Create before first snapshot.
        """

        log.warning("%s: create with source=%s", self, source)

        self.zfs.create({
            'qmsk-backup:source': source,
        })

    def setup (self, create=False, create_source=None, verify_source=None, force_source=False):
        """
            Verify that the ZFS volume exists.
        """

        get_error = None
        zfs_source = {}

        try:
            zfs_source = self.zfs.get('qmsk-backup:source')
        except qmsk.backup.zfs.Error as error:
            get_error = error

        log.debug("%s setup: get_error=%s, zfs_source=%s", self, get_error, zfs_source)

        if get_error:
            if not create:
                raise get_error

            elif self.rsync_source:
                # create for mount/rsync
                self.create(create_source)

            elif self.zfs_source:
                # will be created by zfs recv
                pass

            else:
                raise Error("{zfs}: local dataset is missing".format(zfs=self.zfs))

        elif verify_source and zfs_source != verify_source:
            if force_source:
                log.warning("%s: update qmsk-backup:source: %s from %s", self, force_source, zfs_source)

                self.zfs.set('qmsk-backup:source', force_source)

            else:
                raise Error("ZFS %s property qmsk-backup.source=%s mismatch, should be %s" % (self, zfs_source, verify_source))

        else:
            # ok
            pass

    def mount(self):
        """
            Return backup destination path.
        """

        mountpoint = self.zfs.mountpoint

        if not mountpoint:
            raise Error("ZFS destination is not mounted: %s", self.zfs)

        return mountpoint

    def mount_snapshot(self, snapshot):
        """
            Return backup source path.
        """

        zfs_snapshot = self.zfs.snapshots[snapshot]

        mountpoint = zfs_snapshot.mountpoint

        if not mountpoint:
            raise Error("ZFS destination is not mounted: %s", self.zfs)

        return mountpoint

    def snapshot (self, now, create=False):
        """
            Create new ZFS snapshot for given timestamp.

            Returns qmsk.backup.zfs.Snapshot
        """

        snapshot_name = now.strftime(self.SNAPSHOT_STRFTIME)

        if self.rsync_source:
            # rsync to local ZFS destination, and then create snapshot
            dest_path = self.mount()

            log.info("%s: rsync %s@%s <- %s", self, dest_path, snapshot_name, self.rsync_source)

            rsync_stats = self.rsync(dest_path)

            log.info("%s: snapshot %s", self, snapshot_name)

            return self.zfs.snapshot(snapshot_name, {
                'qmsk-backup:snapshot':  snapshot_name,
                'qmsk-backup:source':    str(self.rsync_source),
            })

        elif self.zfs_source:
            # zfs send-recv snapshot
            try:
                local_snapshot = self.zfs.last_snapshot().name
            except qmsk.backup.zfs.ZFSError as error:
                if create:
                    log.warning("%s: requesting full send for local ZFS that is assumed to be missing: %s", self, error)
                    incremental_bookmark = None
                else:
                    raise Error("{zfs}: local ZFS is missing, use --setup-create".format(zfs=self.zfs))
            else:
                incremental_bookmark = self.zfs_bookmark + ':' + local_snapshot

            # create bookmark
            send_bookmark = self.zfs_bookmark + ':' + snapshot_name

            with self.zfs_source.stream_send(
                incremental     = '#' + incremental_bookmark if incremental_bookmark else None,
                snapshot        = None, # create temporary snapshot
                bookmark        = send_bookmark, # create bookmark for sent snapshot
                purge_bookmarks = self.zfs_bookmark + ':' + '*', # destroy bookmarks for previous incremental sends
                keep_bookmark   = [b for b in (send_bookmark, incremental_bookmark) if b is not None], # keep current and previous bookmark, in case recv fails
                **self.zfs_send_options
            ) as stream:
                # create new snapshot with desired name
                # implicitly creates dataset if missing
                snapshot = self.zfs.receive(snapshot_name,
                    force       = True,
                    properties  = {
                        'qmsk-backup:source': str(self.zfs_source),
                    },
                    stdin       = stream,
                )

            # set properties
            snapshot.set('qmsk-backup:snapshot', snapshot_name)
            snapshot.set('qmsk-backup:source', str(self.zfs_source))

            return snapshot

        else:
            # just snapshot local ZFS
            return self.zfs.snapshot(snapshot_name, {
                'qmsk-backup:snapshot':  snapshot_name,
                'qmsk-backup:source':    None,
            })

    def backup_interval (self, interval, now, snapshot):
        """
            Manage interval holds for snapshot.
        """

        interval_hold = '{interval}/{timestamp}'.format(interval=interval.name, timestamp=interval.format(now))

        log.info("%s: hold %s @ %s = %s", self, snapshot, interval.name, interval_hold)

        snapshot.hold(interval_hold)

    def backup (self, create=None):
        """
            Run backup, managing snapshots.
        """

        # start
        now = datetime.datetime.now()

        log.info("%s: backup %s", self, now)

        snapshot = self.snapshot(now, create=create)

        # manage intervals
        for interval in self.intervals:
            self.backup_interval(interval, now, snapshot)

    def restore (self, snapshot=None, rsync_options={}, zfs_options=None):
        """
            Restore from backup to rsync source.
        """

        if self.rsync_source:
            if snapshot:
                path = self.mount_snapshot(snapshot)
            else:
                path = self.mount()

            # rsync directory contents from local ZFS destination
            path = path + '/'

            log.info("%s: rsync %s -> %s", self, path, self.rsync_source)

            self.rsync_restore(path, **rsync_options)

        elif self.zfs_source:
            if snapshot:
                zfs_snapshot = self.zfs.snapshots[snapshot]
            else:
                # send from last snapshot, not filesystem - sending from filesystem requires it to be unmounted
                zfs_snapshot = self.zfs.last_snapshot()

            log.info("%s: zfs %s -> %s", self, zfs_snapshot, self.zfs_source)

            with zfs_snapshot.stream_send(**self.zfs_send_options) as stream:
                self.zfs_source.receive(stdin=stream, **zfs_options)

        else:
            raise Error("ZFS restore is not supported")

    def purge_interval(self, interval, snapshot_holds):
        """
            Purge snapshots for interval
        """

        # release duplicated snapshots for each interval period
        interval_snapshots = { }

        for snapshot, hold in sorted(snapshot_holds, key=lambda t: t[0].name, reverse=True): # newest first
            newer_snapshot = interval_snapshots.get(hold)

            if newer_snapshot:
                log.info("%s: release %s @ %s: deprecated by %s", self, snapshot, hold, newer_snapshot)

                snapshot.release(hold)
            else:
                interval_snapshots[hold] = snapshot

        # release oldest snapshots for each interval period
        hold_snapshots = sorted(interval_snapshots.items(), key=lambda kv: kv[1].name, reverse=True) # newest first

        log.debug("%s purge interval=%s limit=%d snapshots=%d", self, interval.name, interval.limit, len(hold_snapshots))

        for hold, snapshot in hold_snapshots[interval.limit:]:
            log.info("%s: release %s @ %s", self, snapshot, hold)

            snapshot.release(hold)

    def purge_snapshots(self, other=None):
        """
            Purge any un-held snapshots
        """

        for snapshot in self.zfs.list_snapshots('qmsk-backup:snapshot'):
            if (not other) and (not snapshot['qmsk-backup:snapshot']):
                log.debug("%s: skip %s: not a qmsk-backup snapshot", self, snapshot)
                continue

            if snapshot.userrefs > 0:
                log.debug("%s: skip %s: still referenced: %d", self, snapshot, snapshot.userrefs)
                continue

            log.info("%s: purge %s", self, snapshot)

            snapshot.destroy()

    def purge(self, other_snapshots=None):
        """
            Unhold snapshots per interval limits, and destroy un-referenced snapshots.
        """

        # collect { Interval.name: [(Snapshot, hold_tag)] }
        interval_snapshot_holds = {}

        for snapshot, hold in self.zfs.holds():
            try:
                interval_name, fmt = hold.split('/')
            except ValueError as error:
                log.warn("%s: unknown snapshot %s hold %s: %s", self, snapshot, hold, error)
                continue

            log.debug("%s: map snapshot %s hold %s -> interval %s", self, snapshot, hold, interval_name)

            interval_snapshot_holds.setdefault(interval_name, []).append((snapshot, hold))

        # release snapshots per limits
        for interval in self.intervals:
            if interval.limit:
                snapshots = interval_snapshot_holds.get(interval.name, [])

                self.purge_interval(interval, snapshots)

        # destroy released snapshots
        self.purge_snapshots(other=other_snapshots)

ZFS_BOOKMARK = 'qmsk-backup:' + socket.gethostname()

def main (args):
    parser = qmsk.args.parser(package='backup', module='zfs',
            description = __doc__,
            version     = __version__,
    )

    parser.add_argument('-n', '--noop', action='store_true',
            help="No-op")
    parser.add_argument('--sudo', action='store_true',
            help="Run with sudo")

    parser.add_argument('--setup-create', action='store_true',
            help="Create new ZFS backup filesystem")

    parser.add_argument('--force-source', action='store_true',
            help="Update ZFS rsync source")
    parser.add_argument('--ignore-source-mismatch', action='store_true',
            help="Ignore ZFS rsync source mismatch")
    parser.add_argument('--rsync-source', metavar='RSYNC-SOURCE',
            help="Backup rsync source")
    parser.add_argument('--rsync-option', metavar='-option', action='append', dest='rsync_options', default=[],
            help="Pass rsync options")

    # ZFS send/recv
    parser.add_argument('--zfs-source', metavar='HOST:ZFS',
            help="ZFS send/recv from SSH remote or local pool")
    parser.add_argument('--zfs-raw', action='store_true',
            help="ZFS send --raw of encrypted dataset")
    parser.add_argument('--zfs-compressed', action='store_true',
            help="ZFS send --compressed of compressed dataset")
    parser.add_argument('--zfs-bookmark', metavar='BOOKMARK-PREFIX', default=ZFS_BOOKMARK,
            help="Sender bookmark prefix")
    parser.add_argument('--ssh-config', metavar='PATH')
    parser.add_argument('--ssh-identity', metavar='PATH')

    parser.add_argument('--skip-backup', action='store_true',
            help="Skip backup snapshot, just purge")
    parser.add_argument('--interval', metavar=Interval.METAVAR, action='append', dest='intervals', type=Interval.config, default=[],
            help="Backup retention intervals")
    parser.add_argument('--purge', action='store_true',
            help="Purge old snapshots")
    parser.add_argument('--purge-other-snapshots', action='store_true',
            help="Also purge other snapshots without pvl-backup:* properties")

    parser.add_argument('--restore', action='store_true',
            help="Restore from backup")
    parser.add_argument('--restore-snapshot', metavar='SNAPSHOT',
            help="Restore from ZFS snapshot")
    parser.add_argument('--restore-verbose', action='store_true',
            help="Verbose output from restore")
    parser.add_argument('--rsync-restore-delete', action='store_true',
            help="Delete any extra files present on the source when restoring")
    parser.add_argument('--zfs-restore-force', action='store_true',
            help="Use zfs recv -F to force rollback the target dataset for the restore. Destroys any changes on the source, only requires if restored dataset already exists.")

    parser.add_argument('target', metavar='ZFS', nargs='+',
            help="ZFS target")

    args = qmsk.args.parse(parser, args)

    for target in args.target:
        try:
            target = ZFSTarget.config(target,
                    rsync_source    = args.rsync_source,
                    rsync_options   = args.rsync_options,
                    zfs_source      = args.zfs_source,
                    zfs_raw         = args.zfs_raw,
                    zfs_compressed  = args.zfs_compressed,
                    zfs_bookmark    = args.zfs_bookmark,
                    invoker_options = dict(
                        sudo            = args.sudo,
                    ),
                    ssh_options     = dict(
                        config_file     = args.ssh_config,
                        identity_file   = args.ssh_identity,
                    ),
                    intervals       = args.intervals,
                    noop            = args.noop
            )
        except (Error, qmsk.backup.zfs.Error) as error:
            log.error("%s: %s", target, error)
            return 1

        try:
            if target.zfs_source:
                source = str(target.zfs_source)
            elif target.rsync_source:
                source = str(target.rsync_source)
            else:
                source = None

            if args.ignore_source_mismatch:
                verify_source = None
            else:
                verify_source = source

            target.setup(
                    create          = args.setup_create,
                    create_source   = source,
                    verify_source   = verify_source,
                    force_source    = source if args.force_source else None,
            )

            if args.restore:
                target.restore(
                    snapshot    = args.restore_snapshot,

                    rsync_options = dict(
                        verbose     = args.restore_verbose,
                        delete      = args.rsync_restore_delete,
                    ),
                    zfs_options = dict(
                        force       = args.zfs_restore_force,
                        noop        = args.noop,
                        verbose     = args.restore_verbose,
                    )
                )
            else:
                if not args.skip_backup:
                    target.backup(
                            create          = args.setup_create,
                    )

                # purge intervals
                if args.purge:
                    target.purge(other_snapshots=args.purge_other_snapshots)

        except (Error, qmsk.backup.zfs.Error) as error:
            log.exception("%s: %s", target, error)
            return 2

    return 0

if __name__ == '__main__':
    qmsk.args.main(main)
